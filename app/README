Welcome to Alloy. Prepare to be amazed.
========================================

Titanium Alloys are metals which contain a mixture of Titanium and other chemical elements. Such Alloys have very high tensile strength and toughness (even at extreme temperatures). They are light weight, have extraordinary corrosion resistance and the ability to withstand extreme temperatures [1].  

Alloy for Titanium provides you, the developer, with the ability to run fast, jump high and general code like an amazing superstar. 

Codestrong!

[1] http://en.wikipedia.org/wiki/Titanium_alloy

-------------------------
Now to the serious stuff.
-------------------------

Here's how your Alloy directory is laid out.

models              your model files go here
controllers         your controllers files go here
views               yep, the views go here. you're getting it.
assets              place your images, sound files, etc here. They will be deployed into Resources.
migrations          your migrations go here. generate these. don't do these by hand.
styles              your stylesheets for your views go here.

Folders not generated by Alloy automatically, but the developer can create and use.

lib                 put your own libraries here and use require('name') to load it

Also, in the root is the alloy.jmk file and config.json.  Alloy.jmk acts like a makefile and can be used to hook into the Alloy compiler to customize the build process. The config.json file is where you can declare runtime contstants, and widget dependencies.

1) craete the project
2) switch to the root directory of the project and type "alloy new ."
3) run project, should say hello world
3a) open index.js and delete everything except "$.index.open();" that is all we need
4) type "alloy generate controller tabViewOne"
4a) open views/tabViewOne.xml change the parent object to a Tab
4a) open views/tabViewOne.xml change the view object to a Window
4c) open views/tabViewOne.xml change set the title property so we know where we are
5) type "alloy generate controller tabViewTwo"
5a) repeat steps from above but on views/tabViewTwo.xml
6) open index.xml to create the base tabGroup for your application, we are using "require"
to seperate the each window's functionality
7) RUN APP
-- get current tab for opening windows ---
8) create button in tabViewOne.xml
9) open tableViewOne.js in controllers folder, add the code for the click event listener. We can access the
button object using the id like this "$.open_button.addEventListener("click", function(e) {})"
